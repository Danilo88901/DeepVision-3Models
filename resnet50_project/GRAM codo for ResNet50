import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt
import numpy as np
import cv2

# GradCAM Class
class GradCAM:
    def __init__(self, model, target_layer):
        self.model = model
        self.target_layer = target_layer
        self.gradients = None
        self.activations = None
        self.hook_handles = []
        self._register_hooks()

    def _register_hooks(self):
        def forward_hook(module, input, output):
            self.activations = output.detach()

        def backward_hook(module, grad_in, grad_out):
            self.gradients = grad_out[0].detach()

        self.hook_handles.append(self.target_layer.register_forward_hook(forward_hook))
        self.hook_handles.append(self.target_layer.register_backward_hook(backward_hook))

    def generate(self, input_tensor, class_idx=None):
        self.model.eval()
        output = self.model(input_tensor)

        if class_idx is None:
            class_idx = output.argmax(dim=1).item()

        self.model.zero_grad()
        output[0, class_idx].backward()

        # Compute Grad-CAM
        pooled_gradients = self.gradients.mean(dim=(2, 3), keepdim=True)
        cam = (pooled_gradients * self.activations).sum(dim=1, keepdim=True)
        cam = F.relu(cam)
        cam = F.interpolate(cam, size=input_tensor.shape[2:], mode='bilinear', align_corners=False)
        cam = cam.squeeze().cpu().numpy()
        cam = (cam - cam.min()) / (cam.max() - cam.min())  # Normalize
        return cam, class_idx

    def remove_hooks(self):
        for handle in self.hook_handles:
            handle.remove()


# Visualization function
def show_cam_on_image(img_tensor, mask, alpha=0.5):
    img = img_tensor.squeeze().permute(1, 2, 0).cpu().numpy()
    img = (img - img.min()) / (img.max() - img.min())

    heatmap = cv2.applyColorMap(np.uint8(255 * mask), cv2.COLORMAP_JET)
    heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB) / 255.0

    superimposed_img = alpha * img + (1 - alpha) * heatmap
    superimposed_img = np.clip(superimposed_img, 0, 1)

    plt.imshow(superimposed_img)
    plt.axis('off')
    plt.title("Grad-CAM Visualization")
    plt.show()


# ======= Example Usage with ResNet-50 =======

from torchvision import models

# Load model and weights
model = models.resnet50(pretrained=False)
model.fc = torch.nn.Linear(model.fc.in_features, 5)  # change num_classes if needed
model.load_state_dict(torch.load("best_model.pth", map_location="cuda" if torch.cuda.is_available() else "cpu"))
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)
model.eval()

# Select the last convolutional block as target
target_layer = model.layer4[-1]

# Load one image from your dataset
index = val_subset.indices[0]  # or any index you want
image_tensor, label = train_dataset[index]
input_tensor = image_tensor.unsqueeze(0).to(device)

# Apply Grad-CAM
gradcam = GradCAM(model, target_layer)
cam_mask, predicted_class = gradcam.generate(input_tensor)

# Visualize
show_cam_on_image(image_tensor, cam_mask)
print(f"âœ… Real label: {label}, Predicted: {predicted_class}")
