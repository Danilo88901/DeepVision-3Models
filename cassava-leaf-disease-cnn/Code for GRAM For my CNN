import torch
import torch.nn.functional as F

class GradCAM:
    """
    Grad-CAM implementation for visualizing model's attention on input images.
    
    Args:
        model (torch.nn.Module): The trained model.
        target_layer (torch.nn.Module): The specific layer to extract activations and gradients from.
    """
    def __init__(self, model, target_layer):
        self.model = model
        self.target_layer = target_layer
        self.gradients = None
        self.activations = None
        self.hook_handles = []
        self._register_hooks()

    def _register_hooks(self):
        """
        Register forward and backward hooks to capture activations and gradients.
        """
        def forward_hook(module, input, output):
            self.activations = output.detach()

        def backward_hook(module, grad_in, grad_out):
            self.gradients = grad_out[0].detach()

        self.hook_handles.append(self.target_layer.register_forward_hook(forward_hook))
        self.hook_handles.append(self.target_layer.register_backward_hook(backward_hook))

    def generate(self, input_tensor, class_idx=None):
        """
        Generate the Grad-CAM heatmap for a given input and target class.

        Args:
            input_tensor (torch.Tensor): Input image tensor with shape (1, C, H, W).
            class_idx (int, optional): Target class index. If None, uses predicted class.

        Returns:
            cam (numpy.ndarray): Normalized heatmap of shape (H, W).
            class_idx (int): The class index used for Grad-CAM.
        """
        self.model.eval()
        output = self.model(input_tensor)

        if class_idx is None:
            class_idx = output.argmax(dim=1).item()

        self.model.zero_grad()
        output[0, class_idx].backward()

        # Average gradients spatially
        pooled_gradients = self.gradients.mean(dim=(2, 3), keepdim=True)
        # Weight the activations by the pooled gradients
        cam = (pooled_gradients * self.activations).sum(dim=1, keepdim=True)
        cam = F.relu(cam)

        # Upsample CAM to input size
        cam = F.interpolate(cam, size=input_tensor.shape[2:], mode='bilinear', align_corners=False)
        cam = cam.squeeze().cpu().numpy()

        # Normalize heatmap between 0 and 1
        cam = (cam - cam.min()) / (cam.max() - cam.min())
        return cam, class_idx

    def remove_hooks(self):
        """
        Remove all registered hooks.
        """
        for handle in self.hook_handles:
            handle.remove()

def show_cam_on_image(img_tensor, mask, alpha=0.5):
    """
    Visualize Grad-CAM heatmap overlayed on the original image.

    Args:
        img_tensor (torch.Tensor): Input image tensor (C, H, W).
        mask (numpy.ndarray): Grad-CAM heatmap (H, W), normalized [0, 1].
        alpha (float): Transparency factor for overlay.
    """
    import matplotlib.pyplot as plt
    import numpy as np
    import cv2

    # Convert tensor to numpy image and normalize to [0,1]
    img = img_tensor.squeeze().permute(1, 2, 0).cpu().numpy()
    img = (img - img.min()) / (img.max() - img.min())

    # Create heatmap using OpenCV
    heatmap = cv2.applyColorMap(np.uint8(255 * mask), cv2.COLORMAP_JET)
    heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB) / 255.0

    # Overlay heatmap on image
    superimposed_img = alpha * img + (1 - alpha) * heatmap
    superimposed_img = np.clip(superimposed_img, 0, 1)

    plt.imshow(superimposed_img)
    plt.axis('off')
    plt.title("Grad-CAM Visualization")
    plt.show()


# Example usage:

# Select an index from validation subset
index = val_subset.indices[0]

# Get transformed image tensor and label
image_tensor, label = train_dataset[index]

# Prepare batch dimension and send to device
input_tensor = image_tensor.unsqueeze(0).to(device)

# Load best model weights
model.load_state_dict(torch.load("best_model.pth", map_location=device))
model.eval()

# Initialize Grad-CAM with the model and target layer (example: inception2 block)
cam_extractor = GradCAM(model, model.inception2)

# Generate Grad-CAM heatmap and predicted class
cam_mask, predicted_class = cam_extractor.generate(input_tensor)

# Visualize heatmap on original image
show_cam_on_image(image_tensor, cam_mask)

print(f"âœ… Real label: {label}, Predicted: {predicted_class}")

# Don't forget to remove hooks after usage to avoid memory leaks
cam_extractor.remove_hooks()
