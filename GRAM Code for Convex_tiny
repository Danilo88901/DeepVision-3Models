import torch.nn.functional as F
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Grad-CAM class tailored for ConvNeXt
class GradCAM:
    def __init__(self, model, target_layer):
        self.model = model
        self.target_layer = target_layer
        self.gradients = None
        self.activations = None
        self.hook_handles = []
        self._register_hooks()

    def _register_hooks(self):
        # Save activations during the forward pass
        def forward_hook(module, input, output):
            self.activations = output.detach()

        # Save gradients during the backward pass
        def backward_hook(module, grad_in, grad_out):
            self.gradients = grad_out[0].detach()

        self.hook_handles.append(self.target_layer.register_forward_hook(forward_hook))
        self.hook_handles.append(self.target_layer.register_backward_hook(backward_hook))

    def generate(self, input_tensor, class_idx=None):
        self.model.eval()
        output = self.model(input_tensor)

        if class_idx is None:
            class_idx = output.argmax(dim=1).item()

        self.model.zero_grad()
        output[0, class_idx].backward()

        # Compute the Grad-CAM heatmap
        pooled_gradients = self.gradients.mean(dim=(2, 3), keepdim=True)
        cam = (pooled_gradients * self.activations).sum(dim=1, keepdim=True)
        cam = F.relu(cam)

        cam = F.interpolate(cam, size=input_tensor.shape[2:], mode='bilinear', align_corners=False)
        cam = cam.squeeze().cpu().numpy()

        # Normalize the heatmap
        cam = (cam - cam.min()) / (cam.max() - cam.min() + 1e-8)
        return cam, class_idx

    def remove_hooks(self):
        for handle in self.hook_handles:
            handle.remove()

# Overlay the Grad-CAM heatmap on the original image
def show_cam_on_image(img_tensor, mask, alpha=0.5):
    img = img_tensor.squeeze().permute(1, 2, 0).cpu().numpy()
    img = (img - img.min()) / (img.max() - img.min())

    heatmap = cv2.applyColorMap(np.uint8(255 * mask), cv2.COLORMAP_JET)
    heatmap = cv2.cvtColor(heatmap, cv2.COLOR_BGR2RGB) / 255.0

    superimposed_img = alpha * img + (1 - alpha) * heatmap
    superimposed_img = np.clip(superimposed_img, 0, 1)

    plt.imshow(superimposed_img)
    plt.axis('off')
    plt.title("Grad-CAM Visualization")
    plt.show()
index = val_subset.indices[0]
image_tensor, label = train_dataset[index]

# Prepare input for the model
input_tensor = image_tensor.unsqueeze(0).to(device)

# Load the trained model weights
model.load_state_dict(torch.load("best_model.pth", map_location=device))
model.eval()

# For ConvNeXt-Tiny, use an appropriate intermediate layer
# Usually `model.features[-1]` is a good candidate
target_layer = model.features[-1]

# Initialize Grad-CAM
cam_extractor = GradCAM(model, target_layer)

# Generate CAM
cam_mask, predicted_class = cam_extractor.generate(input_tensor)

# Visualize
show_cam_on_image(image_tensor, cam_mask)
print(f"âœ… Real label: {label}, Predicted class index: {predicted_class}")
